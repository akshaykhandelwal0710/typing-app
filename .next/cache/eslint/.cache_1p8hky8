[{"C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\pages\\index.js":"1","C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\pages\\_app.js":"2","C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\analysisBox.js":"3","C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\inputBox.js":"4","C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\textArea.js":"5"},{"size":4401,"mtime":1638871963697,"results":"6","hashOfConfig":"7"},{"size":144,"mtime":1638810632070,"results":"8","hashOfConfig":"7"},{"size":460,"mtime":1638810626732,"results":"9","hashOfConfig":"7"},{"size":353,"mtime":1638810626732,"results":"10","hashOfConfig":"7"},{"size":2470,"mtime":1638813943513,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"179k196",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\pages\\index.js",["23"],"import { useState, useEffect, useRef } from \"react\";\r\nimport AnalysisBox from \"../components/analysisBox\";\r\nimport InputBox from \"../components/inputBox\";\r\nimport TextArea from \"../components/textArea\";\r\n\r\nconst maxlen = 30;//Maximum length of word that can be entered in input box\r\n\r\nvar para = \"Machine learning (ML) is the study of computer algorithms that can improve automatically through experience and by the use of data.\";\r\npara = para.split(' ');\r\nconst numWords = para.length;\r\nvar min = (a, b) => a < b ? a : b;\r\n\r\nfunction HomePage(){\r\n    const [time, setTime] = useState(0);//time in seconds if timer running\r\n    const [running, setRunning] = useState(false);//whether timer running\r\n    const [text, setText] = useState('');//text inside the input box\r\n    const inputRef = useRef(null);//reference to the inputBox\r\n    const [currentWord, setCurrentWord] = useState(0);//current word index in the para\r\n    const [numOfCharsEntered, setNumOfCharsEntered] = useState(0);//number of characters entered\r\n    const [correctChars, setCorrectChars] = useState(0)//Number of characters entered(only from correctly entered words)\r\n    const [match, setMatch] = useState(0);//number of matching characters with the current word\r\n    const [incorrectWords, setIncorrectWords] = useState([]);//list of indices of words entered incorrectly\r\n    const [firstTime, setFirstTime] = useState(true);//whether it is the first time user will start a test in the current session\r\n    const [intervalId, setIntervalId] = useState(null);\r\n\r\n    //Effect to set/unset an interval to run timer\r\n    useEffect(() => {\r\n        if (running){\r\n            setIntervalId(setInterval(() => {\r\n                setTime((prev) => prev + 1);\r\n            }, 1000));\r\n        }\r\n        else if (intervalId != null){\r\n            clearInterval(intervalId);\r\n            setIntervalId(null);\r\n        }\r\n    }, [running]);\r\n\r\n    //set input box to focus when running or text changes\r\n    useEffect(() => {\r\n        if (inputRef != null){\r\n            inputRef.current?.focus();\r\n        }\r\n    }, [running, text]);\r\n\r\n    //Click handler for start button\r\n    const handleClick = (_event) => {\r\n        if (!running){\r\n            setText('');\r\n            setRunning(true);\r\n            setFirstTime(false);\r\n            setCurrentWord(0);\r\n            setNumOfCharsEntered(0);\r\n            setCorrectChars(0);\r\n            setIncorrectWords([]);\r\n            setTime(0);\r\n        }\r\n    };\r\n\r\n    //Change handler for input box\r\n    const handleChange = ({ target }) => {\r\n        const change = target.value.length - text.length;\r\n        var newMatch = 0;\r\n        if (change > 1 || change < -1 || target.value.length > maxlen){\r\n            return;\r\n        }\r\n        while (newMatch < min(target.value.length, para[currentWord].length) && target.value[newMatch] == para[currentWord][newMatch]){\r\n            newMatch++;\r\n        }\r\n        if (target.value[target.value.length - 1] == ' '){\r\n            if (target.value.length - 1 != para[currentWord].length || newMatch != para[currentWord].length){\r\n                setIncorrectWords((prev) => [...prev, currentWord]);\r\n            }\r\n            else{\r\n                setCorrectChars((prev) => prev + para[currentWord].length);\r\n            }\r\n            if (currentWord == numWords - 1){\r\n                setRunning(false);\r\n            }\r\n            setNumOfCharsEntered((prev) => prev + target.value.length - 1);\r\n            setCurrentWord((prev) => prev + 1);\r\n            setMatch(0);\r\n            setText('');\r\n        }\r\n        else{\r\n            setMatch(newMatch);\r\n            setText(target.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>HOME</h1>\r\n            <p>{time}</p>\r\n            <button onClick = {handleClick}>Start</button>\r\n            <TextArea content = {para} disabled = {!running} currentWord = {currentWord} match = {match} totLen = {text.length} incorrectWords = {incorrectWords} firstTime = {firstTime}></TextArea>\r\n            <InputBox rf = {inputRef} value = {text} onChange = {handleChange} disabled = {!running}></InputBox>\r\n            {(!running && !firstTime) ? <AnalysisBox numChars = {numOfCharsEntered} time = {time} correctChars = {correctChars} incorrectCount = {incorrectWords.length} totalCount = {numWords}/> : <div></div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\pages\\_app.js",[],"C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\analysisBox.js",[],"C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\inputBox.js",[],"C:\\Users\\acer\\Downloads\\GitHub\\typing-app\\components\\textArea.js",[],{"ruleId":"24","severity":1,"message":"25","line":37,"column":8,"nodeType":"26","endLine":37,"endColumn":17,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [intervalId, running]",{"range":"31","text":"32"},[1893,1902],"[intervalId, running]"]